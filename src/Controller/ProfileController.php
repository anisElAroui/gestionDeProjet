<?php
/**
 * Created by PhpStorm.
 * User: anis
 * Date: 23/04/18
 * Time: 15:55
 */

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Component\HttpFoundation\File\UploadedFile;

class ProfileController extends Controller
{

    /**
     * @Route("profile", name="profile_show")
     * @Method({"GET"})
     */
    public function showAction()
    {
        $user = $this->getUser();

        return $this->render('Profile/show.html.twig', array(
            'user' => $user
        ));
    }

    /**
     * @Route("profile/edit", name="profile_edit")
     * @Method({"GET","POST"})
     */
    public function editAction(Request $request)
    {
        $user = $this->getUser();

        $editForm = $this->createForm('App\Form\UserType', $user);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $user->getImage();

            $fileName =  $this->generateUniqueFileName().'.'.$file->guessExtension();

            // moves the file to the directory where images are stored
            $file->move(
                $this->getParameter('images_directory'),
                $fileName
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $user->setImage($fileName);

            $dm = $this->get('doctrine_mongodb')->getManager();
            $dm->persist($user);
            $dm->flush();

            return $this->redirectToRoute('profile_show');
        }


        return $this->render('Profile/edit.html.twig', array(
            'edit_form' => $editForm->createView(),
            'user' => $user
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}